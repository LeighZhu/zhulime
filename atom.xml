<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Leigh:// 斯路]]></title>
  <subtitle><![CDATA[行于斯路…]]></subtitle>
  <link href="http://hexo.zhuli.me/atom.xml" rel="self"/>
  <link href="http://hexo.zhuli.me"/>
  <updated>2013-04-20T11:55:02.463Z</updated>
  <id>http://hexo.zhuli.me/</id>
  <author>
    <name><![CDATA[Leigh Zhu]]></name>
    <email><![CDATA[i@zhuli.me]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[smilies test]]></title>
    <link href="http://hexo.zhuli.me/2013/04/20/smilies-test/"/>
    <id>http://hexo.zhuli.me/2013/04/20/smilies-test/</id>
    <published>2013-04-20T11:41:48.000Z</published>
    <updated>2013-04-20T11:50:16.000Z</updated>
    <content type="html"><![CDATA[<p>这篇文章用于测试表情js是否正常，嘿嘿。
比如说呢[ali啊啊啊][ali嘲弄]的。好像和markdown冲突了尼玛！[ali囧]再测试测试</p>
<p>额。。。。[bed扭腰][ali感动]。因为分号好难控制呀，中文的和英文，傻傻分不清楚：:</p>
<p>呵呵呵   再试试吧  居然加空格 [ali啊啊啊]</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Evernote“笔记本”和“标签”的心得]]></title>
    <link href="http://hexo.zhuli.me/2013/04/13/evernote-notebook-tag/"/>
    <id>http://hexo.zhuli.me/2013/04/13/evernote-notebook-tag/</id>
    <published>2013-04-13T02:59:45.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>自从我的电脑还是台式，手机还是 MTK 的时候，就看到好多人推荐 Evernote(中文名：印象笔记，以下简称 EN)，并且不断为她掏腰包购买付费服务。</p>
<p>从实际接触 EN 到手机换成 Android 安装了 EN 之后，我也不可避免得爱上了她。</p>
<p>但是，当存储的笔记数目慢慢增多，心情也变得焦虑起来，怎样合理得去分类这些内容，怎样用好 EN 的“<strong><span style="color: #e30000;">笔记本组</span></strong>”和“<span style="color: #e30000;"><strong>标签</strong></span>”这两个功能呢？这两个功能有什么区别呢？</p>
<p>刚刚开始分类的时候，总是傻傻地很详细地去分门别类，甚至也去参考了图书馆的分类方案，但是当我分好类的那一刻，我便不想用了，因为太详细了，反而不那么方便了，一条关于使用 EN 实现 GTD 的资料，不知道该放在“个人”笔记本，还是“软件”笔记本。更可怕的是，在我开始准备着手建立标签（Tag）系统的时候，顿时傻眼了，这。。和笔记本组有啥区别嘛？不是重复了么。</p>
<p>其实，在这个时代，我们并不需要分类那么详细，因为我们的 EN 比图书馆多了一个“搜索框”。如果你要找某个话题的 note，<strong>只需要搜索相应关键词</strong>，就可以了。</p>
<p>那么，我们如何去建立一个适合自己的分类系统呢？</p>
<p>首先，<strong>EN 将作为我 GTD 和 PKM 的中心的位置，所有东西最后进入这里，或者从这里出去</strong>，那么简单了，我的一级笔记本组分类如下：</p>
<ul>
<li><span style="color: #e30000;"><strong>0#Inbox</strong>  </span>            这是默认笔记本，做收集箱所用，也是<a href="https://chrome.google.com/webstore/detail/iooicodkiihhpojmmeghjclgihfjdjhj">Clearly</a>插件默认笔记本。</li>
<li><strong><span style="color: #e30000;">1#TEMP</span>  </strong>             这个笔记本组用于 GTD 所用。</li>
<li><span style="color: #e30000;"><strong>2#Produce</strong></span>         顾名思义，我的产出，所有从 EN 出去的东西会在这里。</li>
<li><span style="color: #e30000;"><strong>3#Collections</strong></span>  这是我的输入口，所有经过整理的静态资料会在这里。</li>
<li><span style="color: #e30000;"><strong>4#Logcat</strong>            </span>记录归档区
开始具体分解：</li>
</ul>
<p><span style="color: #ff0000;"><strong>0#Inbox</strong> </span>的作用最为简单，可以理解为放在你身边的一个杂物箱，你可以把任何你拿到手或者想出来的东西都一股脑儿丢进去，比如浏览网页时剪辑的文字，走在路上突然冒出的想法，阅览室拿手机拍下的杂志某一页等等。这和 GTD 中的 Inbox 是一样的，只不过重点在于资料。</p>
<p><span style="color: #e30000;"><strong>1#TEMP</strong> </span> 这个组的功能有点复杂，暂定有三个笔记本，分别是：</p>
<ul>
<li><span style="color: #1a90b9;">1@ToDo</span>  放一些<strong>必须做的代办事项列表</strong>，比如，周末去超市购物，我就会写一个 xxxx 日期 - 购物列表 之类的，列举你想要买的东西。现在，我结合 Android 上的 Any.do 应用完成我的 To Do list。但是衔接并不好，有待更新吧。</li>
<li><p><span style="color: #1a90b9;">2@Project </span>这个组用于存放<strong>特定专案</strong>的东西，例如，我计划一次北京的旅行，资料的流向会像下面的配图一样：<a href="http://zhuli.me/wp-content/uploads/2013/04/file-flow.jpg"><img src="http://zhuli.me/wp-content/uploads/2013/04/file-flow-1024x210.jpg" alt="file-flow"></a></p>
</li>
<li><p><span style="color: #1a90b9;">3@SomeDay</span> 顾名思义，这里放的是一些选做的，或者是<strong>近期不想完成的事</strong>，但是这些事都是会有很大的收获。例如我计划买一套摄影设备，但是这可能会发生在几个月之后。我会建立一个笔记本，列出我要买的东西，型号，哪里购买，价格等。
<span style="color: #e30000;"><strong>2#Produce</strong> </span>这个组作为产出组所用，什么是产出呢，我划分的理念很简单，就是你将要<strong>执行的</strong>，或者要<strong>拿出去的</strong>，那么，诸如旅行计划表、博客写作等等，都会在这里保存。注意的是，<strong>这个组中的笔记并不是长期保存的</strong>，最终他们还是要走滴<del>例如，旅行计划，完成之后他们会跑到后面介绍的<strong> </strong><span style="color: #000000;">4#Logcat</span>中的某个本中，比如博客写作，写完发布后，甚至直接删除就可以了。当然，这个案例比较大的话，也可以在这个组下面，为特定的案例新建一个笔记本，我之前的北京计划，就是新建了一个 <em><strong>Beijing </strong></em>笔记本，里面分别保存了景点信息、路线安排等等不同的笔记，最后归档的时候，我选中所有笔记，然后<strong>合并</strong>即可。很是方便。而博客写作，例如本文，它会被我保存在<strong> 2#Produce</strong> 组下面的 <strong>Writing</strong> 笔记本中，写完定稿后，会被归档到下面介绍的 <strong>3#Collection</strong> 组的 <strong>Exp</strong> 笔记本中，因为这是我总结的经验嘛</del>，最后添加上相应的标签，例如 Evernote、PKM，就完成了。</p>
</li>
</ul>
<p><span style="color: #e30000;"><strong>3#Collection</strong> </span><span>这里存储的，是一些<strong>经过处理后的，极富价值的静态资料</strong>，其实这个组，结合后面讲的标签系统，就相当于我的 PKM 了。什么是静态资料呢，我的定义是，它们往往是<strong>已经固化的，不用去执行，只是将来做参考之用</strong>。目前暂时有以下几个笔记本：</span></p>
<ul>
<li><strong><span style="color: #1a90b9;">BooksNotes </span></strong>存放读书笔记，电子书可以直接导出文本存放，实物书的笔记可以手写，然后手动输入，或者拍照、扫描等进行存储，如何论手写笔记和电子笔记的选择，我还是找机会另开文章探讨一下吧。</li>
<li><strong><span style="color: #1a90b9;">Contact </span></strong>人脉管理。什么？手机通讯录不够用么。我感觉不够，虽然我并未实践很久，但是渐渐也发现有必要了，可以将一些特定职能的人的相关信息存档于此，例如，你在 party 上认识一个 EN 达人，你可以做的，不仅仅是记下他的号码和电邮，可以加入博客、爱好、常去的聚会等等，好吧，现在我也只是想想。。。</li>
<li><strong><span style="color: #1a90b9;">Exp</span></strong>. 这里就是我们平时“打怪练级”的经验槽，我在里面存放了一些“打 BOSS”的攻略，比如：Ubuntu 在系统安装之后，我要做怎样一套操作，才能把她调教成我的模式；或者如何煎好一个荷包蛋，我有自己的经验，可以记录（PS：这还用记嘛！！！好吧，只是个例子啦，如果做佛跳墙什么的话，可以考虑记一下。。）</li>
<li><strong><span style="color: #1a90b9;">WebClips  </span></strong>好吧，我是个大懒虫，所有网上剪辑的内容，经过简单加工之后，就丢到了这里，啥都有，虽然我觉得可能会有问题，但是等待时间考验吧。。你会问，啥都扔到这里，不会很乱嘛？哈哈，不会，我有标签呢，再不济，还有搜索框呢。你可以想想成这是一个“剪报”。。报。。</li>
<li><strong><span style="color: #1a90b9;">Tools </span></strong>这里收集了一些工具，主要就是一些网站之类的，太多了不想放浏览器收藏夹，就放这吧，反正不常用，不占位儿~，好吧，收藏夹也许也可以拿出来讲一讲。
<span style="color: #e30000;"><strong>4#Logcat</strong></span>  这个组用于保存<strong>各种记录和日志</strong>，现在有两个笔记本，一个是<span style="color: #1a90b9;"><strong>Archive</strong></span>，存放各种已完成的 list，这里多嘴一句，我不提倡“勤快”地删除那些你完成的 list，这些 list 在完成之后，也许价值比未完成时还高，有机会的话，我另开一篇文章说下我的看法。另一个笔记本叫做 <strong><span style="color: #1a90b9;">Dairy</span></strong>，这和 Archive 有啥区别呢，这个用于存储一些加入主观看法的东西，例如游记啦啥的。</li>
</ul>
<p>这套方案，就是将其尽量还原到实物，什么意思呢？有个说法是，iPhone 之所以只有一个“Home”按键，是因为，这个设计很像抽水马桶，一个按键，你不用说明书，就可以知道它是干嘛的。秉持这个理念，我将笔记本和笔记本组想象成实物的笔记本。“读书笔记”、“剪报”、“总结”、“日记本”。。。闲着无聊的时候，可以打开 EN 来，拿起剪报看看，哈哈哈，好开心！</p>
<p>好，收一下开心的情绪，下面还有更开心的标签（Tag）系统没介绍呢。</p>
<p>在 EN 中，标签和笔记本组的不同就在于：</p>
<ol>
<li><span style="color: #ff6600;"><strong>一条笔记，可以有多个标签，但只能属于一个笔记本。</strong></span></li>
<li><span style="color: #ff6600;"><strong>EN 中，笔记本只能有两级嵌套：笔记本组 --》笔记本，标签却可以有多层。</strong></span>
思路很快就来啦。</li>
</ol>
<p>简单分为两大块，一块叫做“<strong><span style="color: #e30000;">状态</span></strong>”，一块叫做“<strong><span style="color: #e30000;">PKM</span></strong>”。</p>
<p>状态为何意？这一部分，我的架构是这样的：</p>
<p><a href="http://zhuli.me/wp-content/uploads/2013/04/status.png"><img src="http://zhuli.me/wp-content/uploads/2013/04/status.png" alt="status"></a></p>
<p>解释一下编码约定：<span style="color: #008000;"><strong>！</strong></span>感叹号放在最前面，可以让 EN 在排序的时候，把他们靠前，并且做醒目用，表示重要。<span style="color: #008000;"><strong>raw </strong></span>表示未处理，<span style="color: #008000;"><strong>p</strong> </span>表示处理中，<strong><span style="color: #008000;">++</span></strong> 表示有待更新。</p>
<p>例如有一条笔记是从知乎来的，但这个问题还在激烈讨论中，可是你又想把它归档，好嘞，用一记 raw++，万一你处理了一下，换成 p++。</p>
<p>那么，怎么木有处理完的标签呢，<strong>处理完就不用标签</strong>啦，直接加具体标签就好了，何苦再多此一举呢。对了，这些标签也都是临时的，你的目的就是，尽量保证这些标签下面木有笔记。</p>
<p>第二部分就是针对 PKM 了，这个的话，其实没啥好的经验的，我的方法是，<strong>归类，细分</strong>，也就是本文开头提到的，因为标签可以多重使用嘛，所以对于具体笔记加什么标签就不怕不怕啦~~！妈妈也再也不用担心我为一条笔记放到这就放不到那而苦恼得吃不下饭啦！</p>
<p>给个我的大致参考：</p>
<p>顶层：<strong>Learn</strong>、<strong>Life</strong>、<strong>Social</strong></p>
<ul>
<li>Learn，各种学习资料</li>
<li>Life，生活方面，兴趣爱好，个人发展</li>
<li>Social，社会科学，历史，文学，管理。。
其下的就是各种关键词了，如果觉得太多，可以再加个嵌套啥的。我的做法是，<strong>不在父级标签下添加笔记</strong>，所有的笔记，都<strong>只用最下层的具体标签</strong>，诸如 kindle、javascript、而不会放到 Digital、Web Dev 这样的父级标签中，因为这会导致你的笔记很乱。</li>
</ul>
<p>好了，总结一下。</p>
<ol>
<li>Evernote 是一个绝对棒的产品，我用的是国际版的，如果你放心，也不担心某些事情，可以用大陆版的“印象笔记”，其他的诸如 Wiz、有道云笔记等同类软件基本都大同小异，但 EN 无疑是大多数人的选择，也是装逼利器啊！</li>
<li>笔记本组和标签两套分类系统的划分，其实因人而异，也因用途而异，所以我的方法也许只适合我一个人（哭哭），实际上，我也不推荐看完我的文章后，完全照办我这一套，这可能也会毁了你。但是不论怎么划分，我觉得有一点是重要的：<span style="color: #ff0000;"><strong>千万把它们放在两个不同的维度，避免重复</strong></span>，否则。。。。唉，你懂的。</li>
<li>知识管理和时间管理其实是个悖论，别把他们上升成为规范，你会毁了你自己，想想躺在你浏览器收藏夹、人人网收藏夹、微博收藏夹、以及数不清的收藏夹和“火钳刘明”、“转发待看”的东东吧，你个坏银，一年都不知道看她们几眼！！哈哈，说到底，<strong>GTD 是用来让你高效利用时间的，PKM 是让你有效地利用的知识的</strong>，而不是给你管理着玩儿的。。。玩的。。。玩。。</li>
<li>建立一个体系在前期，是很痛苦的，但是经过时间锤炼留下来的适合你的那一套系统，你会觉得特别得心应手，生活不就该如此自然么，哪来那么多繁繁琐琐的事情。科技，是用来让人生活得更舒适的，而不是拿来装逼或者给自己找茬的，不是嘛。
好吧，差不多了，写得手累了，如果真有人耐心看到这的话，有啥想说的，就留下来探讨吧，如果对这个来劲的话，等我后续的文章吧。另外，这个方案，我目前也在试用中，后续应该还会有变化，我会随时更新这篇文章。</li>
</ol>
<p>参考链接：</p>
<ul>
<li><a href="http://playpcesor.blogspot.com/2012/04/evernote.html">电脑玩物：Evernote 筆記分類與標籤心得教學：建立會翻開的抽屜 </a></li>
<li><a href="http://www.douban.com/online/11102838/photo/1539989412/">豆瓣“弓和箭”分享的截图</a></li>
<li><a href="http://www.zhihu.com/question/20094873">如何协调 Evernote 的「标签」和「笔记本」功能？</a></li>
<li><a href="http://xbeta.info/gtd-evernote.htm">GTD 系列教程 3：顶级知识管理工具 Evernote 的 GTD 应用详细指南</a></li>
</ul>
]]></content>
    <category scheme="http://hexo.zhuli.me/tags/Evernote/" term="Evernote"/>
    <category scheme="http://hexo.zhuli.me/tags/PKM/" term="PKM"/>
    <category scheme="http://hexo.zhuli.me/categories/Tutor/" term="Tutor"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[帝都]]></title>
    <link href="http://hexo.zhuli.me/2013/04/06/trip-before-graduation/"/>
    <id>http://hexo.zhuli.me/2013/04/06/trip-before-graduation/</id>
    <published>2013-04-06T03:24:41.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>4 月 1 号就从帝都回来了，拖延症到今天才来写游记。Zoe 的游记都已经晒了两天了，哟嚯嚯！</p>
<p>&nbsp;</p>
<p>从寒假开始筹划的，起因是 Zoe 要去见她的好朋友，于是就顺带了毕业旅行。各种掐时间和安排路线，虽然最后没去成天坛和景山公园，但我们这趟估计也是前后无人呀。</p>
<p>&nbsp;</p>
<p>3 月 27 号，一早爬起，早饭都没来得及吃，就奔向武林那边的机场大巴，往萧山。萧山机场 HGH 还是不错的。建筑啥的都不错，到了北京首都机场就会发现，首都机场除了大了点，也没啥。</p>
<p>&nbsp;</p>
<p>飞机下来直接就是机场快轨往东直门，发现一路上都是高大却没有绿叶的树木，如果是为了防沙尘暴，不是该种一些四季常青的么。另外，北京的出租车的色调就像北京人的餐桌上的色调，不像杭州这般“小清新”。各种建筑物，普遍的采用简单的白色，没有树叶的时候，看上去，些许苍凉，硬朗。</p>
<p>&nbsp;</p>
<p>东直门下来就看到北京古老的 2 号线地铁，那是没有屏蔽门的地铁站，很危险，却很有感觉，地铁过来，可以感受迎面的呼啸，北方的干燥，也闻不到如杭州 1 号线那样的发霉的味道。似乎只有 1 号线和 2 号线是这种老的地铁站？北京交通虽然看似拥挤，却很发达，地铁统一 2 块，列车班次也很频繁，差不多是一班接着一班走。且到处都是指示牌，极其不容易走错和坐错车。</p>
<p>&nbsp;</p>
<p>酒店放完行李后，和 Zoe 的闺蜜 T 三人出发去了 798，发现 798 除了是个装＊利器之外，也就没啥了，好吧，也许我的艺术细胞太缺乏了，我们的重点是烤鸭，大董烤鸭团结湖店，终于吃上了传说中的北京烤鸭，其实除了皮之外，也没有什么特别的感觉，啊，可惜的是大董里除了烤鸭什么都吃不起，还好这鸭足够三个人吃。后，走去了三里屯，路过了一家书店，最后回酒店时，戏剧般地在和 T 告别后，没有赶上酒店方向的地铁末班车，连走带公交回了酒店，北京的风够大！</p>
<p>&nbsp;</p>
<p>第二天，同样是和 Zoe 和 T 三人行，颐和园恭王府，中午去了宇宙中心五道口，吃了绝好吃的韩式烤肉坦坦大炉，逛了语言大学，感受了各国文化。。望着人家那自然得和公园似的校园，想着遥远的杭电，四平八稳的草地和方方正正的小树默默兴叹。自然真好。北京人很热心，在颐和园，有个老爷爷主动来给我们讲解，很详细，很热心，很感动。嗯，颐和园的糖葫芦也不错。也感叹，做人做到和申这个地步，真是羡煞千万人。出恭王府，从前海往后海，一路感受传说中的酒吧文化，其实和西塘的酒吧一条街也差不多。。。</p>
<p>&nbsp;</p>
<p>第三天开始，开始了只有我和 Zoe 的毕业旅行，原计划是去看升旗玩故宫，不过 Zoe 不出意外的开小差了，于是改了计划中的第四天的行程。绿树红墙的北海公园，看不见绿树，却看到很多北京当地人的活动，老爷爷的地面书法，他还给我们讲解了这种书法在北京书法协会中的情况什么的。太热情了！白塔边上蹭了导游解说，走到那个平台的角上就可以看到远处的紫禁城一角。没有想象中那么气派亮丽。有的确是饱经历史磨砺的斑驳的面目，似乎可以看到刀枪的痕迹，似乎那边的太阳还是射着那年的光线，说实话，这个景象比之后在故宫里面看到的有感觉多了。出北海北门，往钟鼓楼。边上吃了炸酱面等小吃。先上钟楼再鼓楼，钟楼的楼梯比较险。下来的时候，Zoe 抱着栏杆的那个情景，大概也会是将来不太容易忘掉的美好回忆。鼓楼看似更祥和点，没有钟楼那般沧桑。击鼓表演吸引了很多老外争相拍摄。他们眼中的北京，应该更好看吧。</p>
<p>&nbsp;</p>
<p>雍和宫大街往北就是雍和宫，雍和宫其实完全就是个喇嘛庙了，并不是我想象的改成喇嘛庙之前的那般。出雍和宫附近不远就是孔庙和国子监，这两个景点是连在一起的，其实没有很精彩的地方，孔庙中遍地都是石碑，里程碑。国子监也差不多，重要景点应该是状元桥吧，哈哈。我们时间很准，出国子监的时候，刚好关门。</p>
<p>&nbsp;</p>
<p>附近有一家素菜馆 -- 叙香斋，很有意思的店，他会把各种素菜做成荤菜的模样，这还没完，在吃着这些看似像肉的菜时，还真会吃出那种肉感来，即便我们都知道只不过是豆腐干而已。总的来说，很好吃，很过瘾，还想吃。</p>
<p>&nbsp;</p>
<p>回去路上路过了下簋街，映像就是到处的大红灯笼和排档。</p>
<p>&nbsp;</p>
<p>第四天，四点来钟就从床上跳起，出门打了车直冲天安门广场，原本以为大北京没那么多人和我们一样疯狂吧，没想到，我们之前还有好几百号人。两人狂奔着去广场，位置还不错。看完升旗拍够了照片，就往故宫去了。当你从远处看的时候，它是紫禁城，走到里面看，它是故宫博物院。其实基本上，殿堂都是不能进的，只能在门口或者窗外看，里面也只是后期摆设的。大部分的建筑都修过了，红漆都是新的，没修过的地方，外面都蒙了一层铁丝网。很多殿其实都差不多，在里面，可以感受古代帝王是如何一点点偷懒的，早朝地点一点点往里面缩，早朝频率也一点点变慢，夸张的二十来年不上朝？最后，连寝宫干脆也从乾清宫转移到了养心殿。最后的珍宝馆和钟表馆还是值得一看，尤其是钟表馆，可以看到，当时清政府的最高工厂是如何把别人造枪炮的心思花在造各种奇奇怪怪的钟表的。</p>
<p>&nbsp;</p>
<p>出故宫，已是下午四点多，径直去了前面大栅栏，那边似乎曾经是青楼？有两辆地上老式列车还在运营着，两旁的建筑应该已经是晚清的景象了，有着各式的西洋风格的建筑和中式传统建筑交织着。怎么看，都有种被入侵的感觉。我们去吃了大栅栏的东来顺。京味儿铜锅火锅，大众点评上的 99 元团购，超级实惠。</p>
<p>&nbsp;</p>
<p>回酒店休息了一下，去了南锣鼓巷，可惜，找到文宇的时候，已经卖完了，最后买了边上的吉事果回去了，后来发现后海也有吉事果！</p>
<p>&nbsp;</p>
<p>第五天和计划比较，还剩下了天坛，长城，和后来加上去的景山公园，纠结了一下，还是选择去长城，不到长城非好汉啊！人家话放在那，我这强迫症患者不去怎行。计划的 s2 火车没有票了，去德胜门坐公交车，一路上都是黑车。。。无语掉，原价 12 元，打卡只要四块多的路费，被喊了五六十，还好 Zoe 多了个心眼，没上当。坐上正规的 877 公交后，车上的解说还解释了一些注意点什么的。这个解说太好了，到长城后，还用支付宝和她换了 100 现金，我们才有现金买票进去长城 = =！那天雾很大，风吹在树上，树枝上都是小刀片一样的冰，咋一看还像什么花开了，从熊乐园做滑车到北四楼，然后爬上去，上面人真多，果然是晴天看长城，雾天看人海。</p>
<p>&nbsp;</p>
<p>晚上去吃了日料，四人聚餐，六点，去蜂巢剧场看话剧——《恋爱的犀牛》。很好看，很不一样的体验，第一次看话剧，很棒的感觉，以后还会看。还有一点时间，去了烟袋斜街和后海，差不多，毕业旅行就结束了。</p>
<p>&nbsp;</p>
<p>最后一天，早上去北京南站又折返了一站，去寄明信片，北京地铁——高铁——杭州地铁。回杭。</p>
<p>&nbsp;</p>
<p>只见那灰蒙蒙的天，就像个娇滴滴的姑娘，随时就会哭泣，湿润空气和 1 号线的发霉味。。</p>
<p>&nbsp;</p>
<p>再见，北京！感谢你的热情！</p>
<p>&nbsp;</p>
<p>感谢 Zoe 的陪伴，那么多的鲜活的记忆都因你而留下，Zoe 的好友 T，那么多的热心提示，导游和美食，以及，一路上所有的人们，风景，和善难得的北京空气。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Life/" term="Life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[国王]]></title>
    <link href="http://hexo.zhuli.me/2013/02/16/king/"/>
    <id>http://hexo.zhuli.me/2013/02/16/king/</id>
    <published>2013-02-15T17:19:44.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>他是一个国王，统治着 A 星球近半的天下。他的国富饶无比，人人乐业，社会有很稳定，处处夜不闭户，文化也很丰富，各地都有富有自己风俗的市集聚会，可不乐乎。</p>
<p>王，他努力了大半辈子，将他的国治理到这样的繁荣，可是他却成了这繁荣之国中，最孤僻的人。</p>
<p>在治理了一百年后，由于长年无战争，军队腐败，王下三骑士纯粹是一家人的世界，王国颠覆，三骑士之长篡位。</p>
<p>他明明该知道的，军队自从他建立王国之后就在也没有军功之说，他该知道的，该明白的。</p>
<p>那年，他一百六十二岁。</p>
<p>&nbsp;</p>
<p>一</p>
<p>“弟兄们！跟着我冲上这山崖，让我们占领这城堡，灭了那个暴躁的贼徒，建设属于我们自己的美好国家！”</p>
<p>大军压至山崖上的城堡，铲除旧王室，只用了三天时间，随后，一个新的国家诞生了。</p>
<p>那年，他二十五岁。</p>
<p>&nbsp;</p>
<p>二</p>
<p>他被拥戴为国王，刚上任，便大赦天下，废除旧法。通过完善的选举制度，选举出大臣，分兵权给王下三骑士，而王下三骑士又由军队中推举，以战功和威望排列，治国之事由最高议会处理，而最高议会的议员又由各个地方的威望高的人所担任。</p>
<p>他引导国民们进行自由的经济活动，由国民自主进行交易，可以说是非常自由的市场，因此，王国的经济迅速发展。</p>
<p>在王国里，大家都传说着这么一句话——他，好像是个奇人，无所不知，无所不晓，颇为神奇，好像和其他人都不一样。</p>
<p>&nbsp;</p>
<p>四</p>
<p>他是地球上的一个小孩，叫 C，他今年十八岁，他在读高中，爱好很多，特别很喜欢电脑，平时上课的时候，也在偷偷看课外书。</p>
<p>虽然他不是所谓的“坏孩子”，但是，他的排名确是在垫底。他也意识到自己的问题，知道自己这样不行，可是他懒，而且他只喜欢自己看书学习这种方式，而不是老师来教。</p>
<p>有一天，他遇到一个女孩，那个女孩并非美若天仙，却狠狠钩住了他的眼睛，再也无法拔出神来。可是他羞于表达，一直不敢和她说话。就这样，默默地看看她，然后飞奔回教室，狠狠复习一把。</p>
<p>高考结束了，他再也忍不住他的情绪，一咬牙，跑到她面前，向她表白，那天，刚好是填好志愿回校确认的时候。</p>
<p>她拒绝了他，因为她填了自己省最好的大学，而他，因为语文和英语分数太低，只能填一个其他省市的学校。</p>
<p>他回到家，很沮丧，抑郁难耐，他只好打开那台电脑，那是他的慰藉，在网络中，他好像化身成数据一样，脑子中没有其他的事情，有的只是二进制代码。他在编写了一个游戏，一个类似与模拟人生的游戏，而现在，他正开始写他的物理引擎，在翻看资料的时候，他注意到了一个刚刚被提出的一个时空穿梭的理论假设，虽然大家都觉得不可能，但是，他突然有了浓厚的兴趣，正看着资料，一个新闻弹出来，说是欧洲的大型强子对撞机实验成功了，已经发现了上帝粒子。哈哈哈，他大笑一声。</p>
<p>他开始恶补英语，可是他基础太差，等他学到能看懂外文物理资料的时候，时间已经过去三年了，他二十一岁。通过阅读外文资料，他又深层次地理解了量子物理学，那年他三十岁。他又开始学习生物遗传学和生物化学等，，在他六十二岁的时候，他终于制成了一种神秘的药水。那年，地球上也发生了巨大变化，科技发展迅速，手机一天就可以更新，所有国家因为网络，也干脆合并在一起。</p>
<p>&nbsp;</p>
<p>五</p>
<p>C 通过地球上相对先进的技术，结合他理解的量子物理，他用他最心爱的那台电脑，制造了一个微型黑洞逆向器。</p>
<p>是的，他想要穿越回去，而穿越的那一天，是他高考第一天，2500 年，3 月 8 号。</p>
<p>如果计划顺利，他穿越到那一天，就可以用 62 岁的他，去代替 18 岁的他考试。没错，那个药水，就是可以返老还童的药水。</p>
<p>哈哈哈，他大笑着，他顺利了，他成功地来到了 44 年前的高考现场，那么熟悉，那么怀念的场面，他拿出了药水，喝了下去。飞快得向卫生间跑去，在镜子中，他看到他的头发渐渐变黑，皱纹消失，肌肉渐渐恢复，他见到了那张多年不见的脸。</p>
<p>他又拿出了微型防御刀，找到了那年的他，话也不说，一刀刺去……</p>
<p>&nbsp;</p>
<p>六</p>
<p>只听呲的一声巨响，周围都变得亮堂堂的，突然，又变得及其得黑，他感到身体快撕裂了。</p>
<p>怎么了。。难道计算错误了嘛。。</p>
<p>不可能！绝不可能！！</p>
<p>……</p>
<p>。。</p>
<p>原来如此。。</p>
<p>&nbsp;</p>
<p>悖论让世界崩溃了，可他却可笑地留下来了，而所在的维度空间，因为那个微型黑洞逆向器，变成了他那年编写的那个类似与模拟人生的游戏中的设定，一个类似与中世纪欧洲的世界。。。</p>
<p>百般精心地准备，他还是忘了，时空悖论，他对自己很无语，这绝对不该忘的，可是他忘了，明明自己曾经知道的，可是他确实忘了，疏忽了。更苦笑不得的是，由于他的生物技术学得太超前，那种药水，不但返老还童，还重组了所有的细胞结构和基因，因此，他并不属于遗传的人类，因而身体还存在。可是，世界却崩溃了，因为他杀了 18 岁的他，那就不可能有 62 岁的他穿越时空来，也就不会杀了他自己。</p>
<p>也就，不会，再也见不到那个女孩。</p>
<p>他明明该知道的。。。</p>
<p>明明该考虑到的。。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Uncategorized/" term="Uncategorized"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[再见，龙年！]]></title>
    <link href="http://hexo.zhuli.me/2013/02/12/say-goodbye-to-the-year-of-the-dragon/"/>
    <id>http://hexo.zhuli.me/2013/02/12/say-goodbye-to-the-year-of-the-dragon/</id>
    <published>2013-02-12T12:20:33.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>当更多的东西占据了我的时间后，博客慢慢地更得缓慢，但我还是坚持保留着，也许哪天开始，不那么偷懒，我可以好好开始继续把这当成我的垃圾桶，不断地往里面扔。</p>
<p>龙年，2012，早就已经过去了。</p>
<p>去年的现在，我满怀好奇，渴望，窝在阳台上写我的简历，又为我即将入手的 Kindle 而激动。一开学，我便踏上了到处找实习的路。那时，还在 2012 的校招季。而且并没有啥想法，不知道去哪找全面一点的招聘信息。而且，还在犹豫着实习的地点。</p>
<p>后来，当我回过神来发现网易杭研的招聘信息时，却已经为时已晚。不过，机缘巧合，最后我的简历还是送到了 HR 手上，经历二十来天的焦急等待，我最后被录用为网易实习生，前端开发工程师。这让我很开心。我把入职日期选在了 7 月 2 号，之后的时间，自己可以把最后一学期完美搞定。</p>
<p>当然，在应聘网易的期间，几度失望乃至绝望，于是，经小豪学长介绍，去搜道网也面试了，认识了愚人码头，他是我认识的，也是至今为止我所遇到的面试官里我最喜欢的一位，面试过程很像聊天，很轻松，很自在，也很耐心，不知不觉很久就过去了。</p>
<p>当然，在网易录用的通知还没到之前，还有幸去面试了百度实习生，虽然被秒了回来。也是那次回来路上，接到了网易的录用通知。</p>
<p>于是，我收到了两份实习邀请，最后因为我学校还有事情，搜道的地理位置对我来说太不方便，去了网易实习。</p>
<p>7 月 2 号是我入职的那天，only 带着我去领电脑，主管给我安排了位置，开始的实习的工作。不过，我并没有多少的工作量，于是很多时间，都是自己在学习了。开了很多眼界，杭研的模式差不多占据了我脑中所有的关于工作的映像。每天背着电脑，挤上可以挤出油的 B 支 6，穿梭于公司和租的房子之间。其实很充实，如果实际工作再多一点，我怕我是爱上了这种日子。</p>
<p>Zoe 准备考研，住在学校，每天的念想，从早到晚，其实晚上我总是很晚睡，时而牵挂，时而想念，我想要快点让自己落地，找一个地，让我们不用在彼此担心牵挂。</p>
<p>Zoe 暑假身体不舒服几次，开头那次还真是吓了一跳。回想一次，我自己最不舒服的那次，是一次很严重的口腔溃疡，连咽口水也会痛。</p>
<p>越往后，心思越是多，每每回去房间，便是睹物思人。台风和蓝天白云，大概是最美的时候。那时好想，好想，我不是在实习，而是在工作，住的地方不是个简易的出租房，而是自己的家，下班，吃饭，健身房，周末出去采风。躺在床上，有时辗转难眠，焦虑，每天都没啥工作要做，又是自己学，我还没有真真体验到，做一个真正的前端，每天要面对多少麻烦事，呵呵。焦虑我的速度是否太慢了。</p>
<p>鸡腿饭，这三个字，包含了我的暑假，我的第一份工作，以及快乐的每一天。</p>
<p>下半年，我从网易离开，回到学校，参加了终于是属于自己这届的校园招聘，来回于浙大，各种酒店，笔试，面试。拿到过 offer ，拒绝过 offer ，也被刷了好多好多次。当第三次面完百度，回到学校，突然发现自己再也刷不动基础。好像《温州一家人》，最后，周万顺躺在地上，说，出不出油，没关系了，我已经雷了。对，不是每天坐车来回而累，而是每天牵肠挂肚焦虑的累。</p>
<p>最后的结果是我拒绝了我拿到的 offer，败在了每个我满怀信心的关卡，一无所获的我，回到学校后，开始培训当年成立的工作室，很多想法，很多心思，一点点实现，也算是大学最后时间，留下的一些有意义的东西。</p>
<p>之前那个学期，最后拿了一等奖学金，并没见得多少困难，其实在这个学校，这个学院，拿个奖学金还是容易的，只是之前几个学期过得太糊里糊涂了，这一个学期，也算是个完美的收场了。</p>
<p>这一年，是和 Zoe 一起的第二年，经历大大小小数不清次吵架，渐渐地发现我离不开了，这一年，很多地方，还是做得不够，Zoe 跟着我，也没有少吃苦了这一年，很艰苦，每天晚上躺在床上，都要好好摆正自己的态度，让自己在最踏实的路上走下去，这样就可以比别人更快一点走上社会，比别人更早一点，能自己承担这些事。</p>
<p>很幸福，有 Zoe ，新的一年，希望我可以在两人相处的方面，做得好一些，改掉一些幼稚不成熟的习惯，快快过渡吧。</p>
<p>12 月份，爸爸来信息说爷爷病了，住进了医院，后来转到了杭州来。</p>
<p>还记得那年暑假，我说过，最厉害的，我的爷爷。愿他老人家一天比一天好，每天都过得开心，病痛越来越少。</p>
<p>明年，过渡的一年，努力把中间过程缩短吧，加油了。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Life/" term="Life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[二周年]]></title>
    <link href="http://hexo.zhuli.me/2012/12/23/second-anniversary/"/>
    <id>http://hexo.zhuli.me/2012/12/23/second-anniversary/</id>
    <published>2012-12-23T02:48:11.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>二周年，看上去很短，想起来有点长。</p>
<p>渐渐地，你刷尽了我的一切。满满的全是你。</p>
<p>渐渐地，每一次看到你，都会觉得那么舒服，那么顺眼，那么好看，那么让我感觉幸福。</p>
<p>眨眼之间，都是我们两人走在某处的镜头，有财经，有传媒，有计量，有西塘，有绍兴，有复旦，有河坊街...</p>
<p>渐渐地，觉得好像温暖的家，家，其实是一个归属感，对吧。</p>
<p>渐渐地，你变成我重要的人之一。</p>
<p>不愿你受到啥伤害，时刻牵挂着你。</p>
<p>我有点不信那些几年几年的概念，我打算做一个真实一点的人，在这个很多人都浮躁又假的世界上。</p>
<p>如果爱，我更愿努力，想那些让人湿润眼眶的老一辈的爱情那样。</p>
<p>也许，生活逼我们活得假一点，至少在你面前，我想真实。</p>
<p>《第 36 个故事》 很好听，还记得，还是大热天的时候，坐在 B1 上，你拿出你的 mp3，说让我听一首歌，渐渐地，体会到你的感情，你和我一样，离不开彼此。</p>
<p>回想过去两年，其实很短，却回忆满满，开心，忧伤，病痛，疯狂，每一种事情，都有你存在的映像。前几天，爸爸说，你们都在一起的是吧。我说，嗯，每天在一起，吃饭也一起吃。爸爸很安心，也很开心。</p>
<p>我会继续努力，下一个 365 天，愿我们能更接近我们的目标。</p>
<p>前提是，珍惜自己，爱护自己，人，那么脆弱，为了彼此，爱护自己。</p>
<p>周年快乐，新的一年快乐！</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Life/" term="Life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[D2沙龙后感]]></title>
    <link href="http://hexo.zhuli.me/2012/11/28/after-d2-salon/"/>
    <id>http://hexo.zhuli.me/2012/11/28/after-d2-salon/</id>
    <published>2012-11-28T07:04:04.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>这个月 24 号去了阿里技术嘉年华 D2 专场。</p>
<p>前面的分享不多说，虽说平时都没咋遇到，但是，都很专业，很干货。</p>
<p>最后的访谈环节，我提了个问题, 对于前端来说，近一段时间 JS 如火如荼，包括 D2 在内，很多关于 js 的分享会，并且，面试当中，js 的题也是占了大部分，因此，对于在场的嘉宾来说，这么多时间来看，对前端而言，HTML，CSS，JS 如何权衡，是否有不重视 HTML， CSS 的现象？</p>
<p>嘉宾们的回答很不错，尤其是阿当的回答，眼界问题。</p>
<p>是的，也许甚至这个眼界不是别人影响的，而是自己造成的。</p>
<p>我大学的专业是通信工程，而对前端来说有些计算机专业的基础课程，像 面向对象，数据结构，编译原理，计算机操作系统等并不熟悉，因此自己就潜意识地会有中感觉——我这些方面不如计算机专业的。而对于前端来说，三大件中，js 更偏向于编程，有时候需要这些基础知识，而我没有，自己给予自己一种畏惧，认为自己不行，然后看到各种面试题笔试题也都在问 js ，看到各种前辈在分享会上讲的东西，都是很深入的 js 的分享，而偏偏自己不愿意做一个所谓页面重构，我期待能熟练使用 js 的那一天，在 github 上面，host 一个自己的项目，或者给一些有名的项目提交代码等等。因此，自己会一直有一个感觉：JS 很重要，相当重要！</p>
<p>而正式因为这种感觉，在加上自己的 HTML， CSS 方面水平也并不差，因此，在面试，笔试的时候，自己也更看中 js 。</p>
<p>另外，阿当说的对， js 确实是一个快速考研一个人是否合格的好办法，js 题回答，前端基础基本就可以判定为合格，而 CSS 方面，入门门槛低，也许一个人能解决各种像素及问题，可以体现他的前端技术精湛，但在面试环节，要问到这种地步，很费力。</p>
<p>每一个圈子的人都会说自己圈子的这个东西多少多少好，别的多少不好，放开眼界，多看看其他的圈子，让自己平衡平衡。</p>
<p>感谢阿当，很受用，无论是这次的问答，还是之前看的他的那本书。</p>
<p>从今天起，每天都要尽可能让自己安定下来，不急，不求快，踏踏实实地看完每一本书，认真实践书中的知识点，不被网络上的新技术搞迷茫，当然，也要更快的接触前沿技术，知道前端业界的趋势，加油吧，我可不要只做一个平平凡凡的前端。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Life/" term="Life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[当一枚硬币落下时]]></title>
    <link href="http://hexo.zhuli.me/2012/08/12/when-a-coin-falls/"/>
    <id>http://hexo.zhuli.me/2012/08/12/when-a-coin-falls/</id>
    <published>2012-08-12T00:35:02.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>似乎很久没有写这样的文字。</p>
<p>由于一直想让自己往技术方面有大幅度长进，以至于连这个个人博客中也都积累了一些堆砌代码的博客文章，当然这并不是我所预想的我的博客，也许，很快，这类文章将不会出现在主页，而存在于一个分类中，却不做展示。</p>
<p>当面对两个选择时，抛硬币总能奏效，并不是因为它总能给你对的答案，而是在你把它抛在空中的那一秒里，你突然知道你希望它是什么。</p>
<p>当初面试，我曾面临两个选择，对于我而言，两个选择都是值得期待的路线，而且确实就存在于一个世纪难题——选大公司还是小公司？</p>
<p>好吧，我选了，可是我并没有抛掷硬币，而是因为一些客观的环境因素。</p>
<p>其实，抛硬币固然有效，但，有效也只不过是存在于选择那刻。</p>
<p>当一枚硬币落下时，无论是正面或者反面，你都不会知道哪一个是所谓正确的。</p>
<p>设想了如果我当时也扔了硬币，估计我会强迫症促使再扔一次。</p>
<p>好吧，就这样，今年的夏天就这么结束了。</p>
<p>好吧，纯粹的学生生涯，也早结束了。</p>
<p>总是有很多想法，想做很多事，想学很多东西，想去很多地方，想完成很多目标……</p>
<p>于是，我又面临了一个又一个的选择。</p>
<p>即使确定了我要做前端，还是有很多未确定的因素，时而茫然，时而焦虑，时而懒散……</p>
<p>当看到《爱情公寓 3》最后一集，突然好想去求婚啊，真是美好。</p>
<p>好吧，原来我也到了这个年纪。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Life/" term="Life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[SE LT18i/Arc S刷机完全参考]]></title>
    <link href="http://hexo.zhuli.me/2012/07/30/flash-custom-rom-to-lt18i/"/>
    <id>http://hexo.zhuli.me/2012/07/30/flash-custom-rom-to-lt18i/</id>
    <published>2012-07-30T03:25:12.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>上周，Zoe 买了新爪机，SE 的 LT18i／Arc S 也就是传说中的 anzu 。
然后原生系统是 2.3 的，而且带了 N 多 索爱的应用，不用说，刷机之～
由于我是 android 刷机小白，于是去看了很多所谓教程，gfan.com 上很多很多教程，但是都属于用这个工具，用那个工具的，我又很不喜欢用这种工具，他在做啥都不知道，有什么好玩的。
于是，自己摸索。根据大学本科所学的，手机无非就是个提供操作系统的嵌入式系统加上一个信号处理的 DSP 控制芯片 及相关周边组成的玩意儿。
android 机器刷机，无非就这几个步骤：
1. 解锁 bootloader。
2. 刷入内核，系统等。
每一步都有很多方法，第一步解锁，现在比较流行的是 fasrboot 去解锁，一般命令就是类似于</p>
<pre><code>$ fastboot oem unlock
`&lt;/pre&gt;
那么，我们首先需要一个 fastboot 可执行文件。其实国内论坛又把这个搞得很神秘，其实，去装一个 android sdk，无论是 Windows 版本还是 Linux 版本也好，都一样，然后，运行之，下载 最顶上的 Android SDK tool 和 Android SDK platform tools 基本就 OK 了，下载完成后，去 android sdk 目录下的 platform tools 目录中，就可以发现那里已经躺着一个了 :)

有了 fastboot 后，我们还需要让我们的 设备 可以顺利地以 fastboot 模式与电脑相连接。
那么，对于 Windows 来说，我们需要一个一个驱动配置文件 android_winusb.inf 。可以去 [这里](http:<span class="comment">//wiki.cyanogenmod.com/wiki/Howto:_Install_the_Android_SDK/Windows "这里") 下载适配 cyanogenmod 所支持的机型的驱动文件，然后，将你的手机以 fastboot 模式 连接电脑（具体手机如何进入 fastboot 模式，每个手机都不一样，请自行寻找一下相应型号手机的开启方法），然后，Windows 会恐吓你说驱动无法安装，别急，手动定位到刚刚下载的驱动配置文件，即可完成安装。装完后似乎在设备管理器里会有一个 android adb 啥的设备，这就 OK 了。</span>
对于 Linux 来说，android 和各种 Linux 发行版都是同一个种族，就没有 Windows 那么麻烦了。对于 Ubuntu 来说：
&lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
$ sudo gedit /etc/udev/rules.d/<span class="number">51</span>-android.rules
`&lt;/pre&gt;
新建一个配置文件，然后加入
&lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
# fastboot protocol on maguro/toro (Galaxy Nexus)
SUBSYSTEM==<span class="string">"usb"</span>, ATTR{idVendor}==<span class="string">"18d1"</span>, ATTR{idProduct}==<span class="string">"4e30"</span>, MODE=<span class="string">"0600"</span>, OWNER=<span class="string">"&lt;username&gt;"</span>
`&lt;/pre&gt;
这个配置是 Galaxy Nexus 的。请将其中的 <span class="number">18</span>d1 和 <span class="number">4e30</span> 换成你的设备的 id。 可以运行 lsusb 命令查看你设备的 usb id 。
OK，除此之外，我们还需要让其生效
&lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
$ service udev restart
`&lt;/pre&gt;
如果此命令对你无效，重启一下吧～

好了，基本环境就部署完成了。接下来是刷机过程。
对于 LT18i 来说，解锁需要索爱的 key。看了下这个 
[索爱解锁指导](unlockbootloader.sonyericsson.com/instructions <span class="string">"索爱官方解锁指导"</span>)
根据 IMEI 索爱会给你一个 KEY。记下那个 KEY。

&lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
$ fastboot -i <span class="number">0x0fce</span> getvar version
`&lt;/pre&gt;
如果有返回信息，就可以确定 fastboot 模式是否成功连接
之后，

&lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
$ fastboot -i <span class="number">0x0fce</span> oem unlock <span class="number">0</span>xKEY
`&lt;/pre&gt;
其中的 KEY 就是刚才得到的 KEY。

这样， bootloader 就解锁了

接下来下载刷机包，例如我是刷了 [FXP130](http:<span class="comment">//ul.to/folder/fwnp9j "FXP130") 包中带了一个 boot.img 。</span>
刷入 boot.img 可以使用如下方法：
 &lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
$ fastboot flash boot boot.img
`&lt;/pre&gt;
这样可以获得一个 CWM 的 recovery。
拷贝 ROM 包到 SD 卡。
注意：索爱的 LT18i 比较好玩，直接刷 CM 的 ROM 会失败，首先恶魔需要将那个要所包中的 update-script 文件修改一下，文件的所在路径如下：
FXP130-cm-<span class="number">9</span>-<span class="number">20120720</span>-UNOFFICIAL-anzu/META-INF/com/google/android
将开头的 assert 开始，到第一个 <span class="package"><span class="keyword">package</span> 的这段代码删除。
这段代码如下。
&lt;<span class="title">pre</span> <span class="title">class</span>="<span class="title">prettyprint</span>"&gt;`
<span class="title">assert</span>(<span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">product</span>.<span class="title">device</span>") == "<span class="title">LT18i</span>" || <span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">build</span>.<span class="title">product</span>") == "<span class="title">LT18i</span>" || 
       <span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">product</span>.<span class="title">device</span>") == "<span class="title">LT18a</span>" || <span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">build</span>.<span class="title">product</span>") == "<span class="title">LT18a</span>" || 
       <span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">product</span>.<span class="title">device</span>") == "<span class="title">LT15i</span>" || <span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">build</span>.<span class="title">product</span>") == "<span class="title">LT15i</span>" || 
       <span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">product</span>.<span class="title">device</span>") == "<span class="title">LT15a</span>" || <span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">build</span>.<span class="title">product</span>") == "<span class="title">LT15a</span>" || 
       <span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">product</span>.<span class="title">device</span>") == "<span class="title">anzu</span>" || <span class="title">getprop</span>("<span class="title">ro</span>.<span class="title">build</span>.<span class="title">product</span>") == "<span class="title">anzu</span>");
</code></pre>
<p>删除完后，重新打包～ 放入 SD 卡根目录。</p>
<p>关机，进入手机的 recovery 模式。
wipe data
wipe cache
advance/ wipe dalvik 
advance/ wipe battery
这就是论坛说他们说的 4 wipe。
然后，install from sd card 再选择 choose zip from sdcard
再选择我们刚在复制进去的 ROM 包。
确认，即可刷入。
至此，刷机完成，重启即可进入新系统。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/tags/android/" term="android"/>
    <category scheme="http://hexo.zhuli.me/categories/Tutor/" term="Tutor"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[一道传说中的国外的前端面试题的几种解法]]></title>
    <link href="http://hexo.zhuli.me/2012/07/25/js-clone-array-and-concat-it/"/>
    <id>http://hexo.zhuli.me/2012/07/25/js-clone-array-and-concat-it/</id>
    <published>2012-07-25T03:03:17.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>所谓面试题，总是喜欢考一些冷僻的，或者细节性的东西。
这是一道传说中的国外的前端面试题。来自 <a href="http://darcyclarke.me/development/front-end-job-interview-questions/" title="Front-end Job Interview Questions"></a>
原体如下：</p>
<blockquote>
<p>Make this work: </p>
<pre><code>[1,2,3,4,5].duplicator(); // [1,2,3,4,5,1,2,3,4,5]`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
</code></pre>
</blockquote>
<pre><code>立刻想到了 js 有数组拼接的方法：concat()；
&lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
<span class="function"><span class="keyword">function</span> <span class="title">duplicator</span><span class="params">()</span> {</span>
    <span class="keyword">var</span> nArray = [];
    <span class="keyword">var</span> origin = <span class="keyword">this</span>;
    <span class="keyword">for</span> (<span class="keyword">var</span> i = origin.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {
        nArray[i] = origin[i];
    };
    <span class="keyword">return</span> origin.concat(nArray);
}
Array.prototype.duplicator = duplicator;
console.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].duplicator());
`&lt;/pre&gt;
这该是最容易想到的方法，创建了新的数组，然后通过 <span class="keyword">for</span> 循环遍历数组元素，并存入 nArray 中，这样就得到了一个一样的数组，然后使用 concat() 方法拼接即可。

然后，作为一个前端，我们需要想如何减少代码量 “Write less, <span class="keyword">do</span> more!”。
于是，不就是复制数组嘛，复制数组还有更巧妙的方法。
原生数组有个切割数组的方法 slice() ，将其第一个参数设置为数组切割起始点 <span class="number">0</span>， 省略第二个参数，就可以做到将整个数组切割，也就是完成了复制。
&lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
<span class="function"><span class="keyword">function</span> <span class="title">duplicator</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.concat(<span class="keyword">this</span>.slice(<span class="number">0</span>));
}
Array.prototype.duplicator = duplicator;
console.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].duplicator());
`&lt;/pre&gt;

慢着，我们似乎多此一举了。。
&lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
<span class="function"><span class="keyword">function</span> <span class="title">duplicator</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> <span class="keyword">this</span>.concat(<span class="keyword">this</span>);
}
Array.prototype.duplicator = duplicator;
console.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].duplicator());
`&lt;/pre&gt;

引申，其实 concat() 方法也可以复制数组的。
&lt;pre <span class="keyword">class</span>=<span class="string">"prettyprint"</span>&gt;`
<span class="function"><span class="keyword">function</span> <span class="title">clone</span><span class="params">()</span> {</span>
    <span class="keyword">return</span> [].concat(<span class="keyword">this</span>);
}
</code></pre>
<p>将此函数添加为数组的方法就可以用来复制数组了。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Codex/" term="Codex"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[在 nginx 环境下开启多个站点（node.js）]]></title>
    <link href="http://hexo.zhuli.me/2012/07/19/multi-nodejs-sites-on-nginx/"/>
    <id>http://hexo.zhuli.me/2012/07/19/multi-nodejs-sites-on-nginx/</id>
    <published>2012-07-19T07:52:16.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>因为只有一台 VPS ，但是要跑好多个网站，只把域名的 A 记指向 VPS 的 ip 地址，那末就只能有一个网站了，怎么办捏？</p>
<p>回顾一下之前的 node.js 上跑的应用程序代码：</p>
<pre><code>var http = require('http'); 
http.createServer(function (req, res) { 
        res.writeHead(200, {'Content-Type': 'text/plain'}); 
        res.end('Hello World \n'); 
        }
    ).listen(8888); 
    console.log('Server running.LOL'); 
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>

Look!! 它在监听 8888 这个端口，好了，我们知道，就算 ip 只有一个，通过端口号，就可以分辨不同的应用程序，nginx 当然也可以干这种事情。

找到你的 nginx 安装目录，我的是在 /etc/nginx/
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>`
vi /etc/nginx/ngnix.conf 
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
拉到 HTTP 块，最后可以看见，nginx.conf 最后的代码是这样的：
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>`
    # Load config files from the /etc/nginx/conf.d directory
    include /etc/nginx/conf.d/*.conf;
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
这就是 nginx 为我们准备的，单独的，域名配置文件目录。
OK！
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>`
cd /etc/nginx/conf.d
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>

随便新建一个 xxx.conf 文件
输入如下配置代码：
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>`
server {
    listen 80;
    server_name yourdomain.com;
    location / {
        proxy_pass http://127.0.0.1:8888;
    }
}
</code></pre>
<p>保存，然后记得重启 nginx 即可。
这个配置的意思显而易见：</p>
<p>监听 80 端口
yourdomain.com 这个域名
对应的位置 （代理到 本地的 8888 端口）</p>
<p>最后别忘了把域名的 A 记录指过来就行了。 :ali 啊啊啊:</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Uncategorized/" term="Uncategorized"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[nginx and node.js on vps]]></title>
    <link href="http://hexo.zhuli.me/2012/07/16/nginx-and-node-js-on-vps/"/>
    <id>http://hexo.zhuli.me/2012/07/16/nginx-and-node-js-on-vps/</id>
    <published>2012-07-16T06:11:20.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>买了 VPS 随便瞎折腾，也不知道正确与否，反正在跑了，就算对了吧。记录一下折腾过程。
话说买来 VPS 是准备折腾 node.js 的，为了长远考虑，基本还是要扔个 nginx 上去的，虽然 node.js 本身就可以当 http 服务器使唤，考虑到， nginx 是宇宙无敌的反向代理，有了它，多域名，80 端口冲突啥也都好解决。</p>
<p>那么首先是 nginx ，小鸡是 CentOS 5 的。参考了 Linode 的 <a href="http://library.linode.com/lemp-guides/centos-5">LEMP Server on CentOS 5</a></p>
<p>本来想自己编译的，偷懒了</p>
<pre><code>rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/i386/epel-release-5-4.noarch.rpm 
yum update 
yum install nginx sudo `<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
&amp;nbsp;

这就装好了，下面命令开启 nginx 和加入开机启动：
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>` 
/etc/init.d/nginx start 
chkconfig --add nginx 
chkconfig nginx on 
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
访问，既可以看到 nginx 欢迎页面了。
洁癖起见，我们将 nginx 默认的 web 目录移走，移到更多人放的 /home/xxx 下面，默认在 /usr/share/nginx/html (不同的 nginx 编译版可能会有不同，这里用的的 EPEL 的)。
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>` 
vi /etc/nginx/ngnix.conf 
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
在 http 块下找到 server 代码块，将其中的 root 后面的路径改了就好了。改完记得 nginx restart。

好了，引擎 X（engine X/nginx） 装好了。
接下来部署 node.js

首先需要 python 2.6 版本以上， CentOS 5 默认是 2.4 的，废话不多说，直接上命令：
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>` 
yum groupinstall 'Development Tools' 
yum install openssl-devel 
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
安装各种开发工具，用于后面的编译。
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>` 
wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2 
tar jxvf Python-2.7.3.tar.bz2 cd Python-2.7.3 
./configure --prefix=/usr/local/python2.7 
make make install 
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
安装 python 2.7 到 /usr/local/python2.7 目录下
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>` 
mv /usr/bin/python /usr/bin/python2.4 
ln -s /usr/local/python2.7/bin/python2.7 /usr/bin/python 
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
链接文件替换老版本的 python
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>` 
wget http://nodejs.org/dist/v0.8.2/node-v0.8.2.tar.gz tar xvf node-v0.8.2.tar.gz 
./configure 
make 
make install `<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
于是，发生错误了，提示 import error 木有找到 bz2 .

好吧，查证了下，说是 CentOS 自带的库太老了，于是：
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>` 
yum install -y bzip2* 
cd ../Python-2.7.2/Modules/zlib 
./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install 
cd ../../ 
python setup.py install 
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
继续 cd 到 node 源码目录，继续 make &amp;amp;&amp;amp; make install

无错误的话，就 OK 了。
找个地方，写个 app.js :
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>` 
var http = require('http'); 
http.createServer(function (req, res) { 
        res.writeHead(200, {'Content-Type': 'text/plain'}); 
        res.end('Hello World \n'); 
        }
    ).listen(8888); 
    console.log('Server running.LOL'); 
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
运行：
<span class="tag">&lt;<span class="title">pre</span> <span class="attribute">class</span>=<span class="value">"prettyprint"</span>&gt;</span>` node app.js 
</code></pre>
<p>访问下 yourdomain:8888 就可以看到 node.js 已经在跑了。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/tags/nginx/" term="nginx"/>
    <category scheme="http://hexo.zhuli.me/tags/node.js/" term="node.js"/>
    <category scheme="http://hexo.zhuli.me/tags/vps/" term="vps"/>
    <category scheme="http://hexo.zhuli.me/categories/Codex/" term="Codex"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[JavaScript 中在 function() {} 前面加感叹号的作用]]></title>
    <link href="http://hexo.zhuli.me/2012/07/11/js-exclamation-mark-before-function/"/>
    <id>http://hexo.zhuli.me/2012/07/11/js-exclamation-mark-before-function/</id>
    <published>2012-07-11T08:48:54.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>闲着无聊想去看看 Twitter 的 Bootstrap： <a href="https://github.com/twitter/bootstrap">https://github.com/twitter/bootstrap</a></p>
<p>翻看他们的 js ，发现他们代码中有很多类似于如下的情形：</p>
<pre><code>!function ($) {
    //do sth
}(window.jQuery);
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>

很奇怪的发现他们在 function 前面加上了感叹号，但往下看到结尾部分的代码 (window.jQuery) 似乎明白了点什么，于是去 stackoverflow 上搜了下。

果然有很多人提过这个问题，这里放出一个： [What does the exclamation mark do before the function?](http://stackoverflow.com/questions/3755606/what-does-the-exclamation-mark-do-before-the-function)

正如之前所想，其加上了 ！ 的作用，即将前面的匿名函数 

function ($) {}  这是一个函数的声明，当我们需要让它立即执行，就需要使用 （） 操作符将函数调用，而  () 操作符需要前面是一个表达式，通常，我们会使用一对圆括号将匿名函数声明转换成表达式。所以，我们通常是这么写的：

<span class="tag">&lt;<span class="title">pre</span>&gt;</span>`(function () {}) ()`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>

那么，其实，最后的括号是用来执行函数的，我们只要保证它前面是个结果是个函数的表达式就可以了。那么，其实， js 中很多操作符，我们都可以使用，如 [JavaScript 秘密花园](http://bonsaiden.github.com/JavaScript-Garden/zh/#function.scopes) 中所说，我们可以写成这个样子：

<span class="tag">&lt;<span class="title">pre</span>&gt;</span>`+function(){}();
(function(){}());`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>

当然，理论上也是可以这么写的：

<span class="tag">&lt;<span class="title">pre</span>&gt;</span>`-function(){}();
~function(){}();`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>

至于为什么可以这么做呢，那是因为 () 操作符比 ! 操作符的优先级要高两级，[参见 MDN](https://developer.mozilla.org/en/JavaScript/Reference/Operators/Operator_Precedence)

所以如果是这么一段代码：

<span class="tag">&lt;<span class="title">pre</span>&gt;</span>`!function () {
    return false;
} ()
</code></pre>
<p>执行过程便是，函数返回 false 然后取反，变为 true 。</p>
<p>那么，问题又来了，我们该选哪种写法呢？ 为什么用 ! 不用 + 呢？
看到 <a href="http://www.swordair.com/blog/2011/10/714/">葵中剑</a> 跑过测试，我也去跑了几次，但是结果参差不齐，不知道有没有参考意义。</p>
<p>不过，从感官上来说， ! 相比 (...) 不仅减少了一个字符（当然这个效果应该不明显），而且使得代码更加易读，手头没有智能点的编辑器的话，也不用费劲去找括号的对应了，再书写代码时候，一个 ! 总比 (...) 出错的概率小了</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Codex/" term="Codex"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[实习日志.1]]></title>
    <link href="http://hexo.zhuli.me/2012/07/02/intern-1/"/>
    <id>http://hexo.zhuli.me/2012/07/02/intern-1/</id>
    <published>2012-07-02T13:41:50.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>今天去 NTES.HZ 报到了，接应还做的挺好的。依然是当时面试的那幢楼，后来才知道，HR 和 WD 是在同一幢楼。</p>
<p>一位姐姐带着我们填协议，神马实习协议啊，什么登记表啊，什么政府的见习 XX 表啊。。。什么保险证明啦。。。。一共有九份，厚厚一叠咧。发现研究生真多啊，浙大的真多啊。。。</p>
<p>然后发了工牌，姐姐说丢了要去买的，100 块。。。 :ali 大汗:</p>
<p>写完似乎都十点多了，然后等着各部门把我们带走。。。</p>
<p>然后差不多十一点半，俺被领走了。</p>
<p>后来，O.C. 的带领下，去领了电脑，配置定挺低端，显示器不错，嘿嘿。</p>
<p>然后去次饭，食堂没有想象中的大，但是比想象中的好吃。 :bed 啦啦啦:</p>
<p>下午刚好有分享会，组内两个前辈分享了很深奥的东西，结束的时候，差不多三点半了。</p>
<p>回去装了些软件。</p>
<p>然后 O.C. 把我的内部帐号发给了我，差不多是部署完毕了。</p>
<p>一起吃了晚饭，然后就下班咯～ :bed 转圈:</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Life/" term="Life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[好吧，最近挺忙的]]></title>
    <link href="http://hexo.zhuli.me/2012/05/18/recent/"/>
    <id>http://hexo.zhuli.me/2012/05/18/recent/</id>
    <published>2012-05-18T13:01:21.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>其实我并不想让这个博客沦为一个技术博，如果哪天技术文太多了，我会考虑分离的。</p>
<p>挺想写篇文章来更一更，以免再度沦为姨妈博，无奈最近太折腾，完全没有时间，也没有想法。</p>
<p>好吧，说说这些日子的事情。</p>
<p>其实从 4 月中旬到五月中旬，一直沦陷于各种面试中。</p>
<p>现在终于松一口气了，然后期末了。</p>
<p>3 门组织的考试，1 门实验课，2 门考察课。</p>
<p>努力一下，顺利搞定吧。</p>
<p>美好的暑假在等待着我。 :ali 啊啊啊:</p>
<p>PS：其实是不是真的美好，我也不知道诶。。。。。。不过，</p>
<p>终于是踏出了前端这条路的第一步。 :bed 奔跑:</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Life/" term="Life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[自定义/增加 WordPress 表情]]></title>
    <link href="http://hexo.zhuli.me/2012/05/04/add-custom-smilies-to-wordpress/"/>
    <id>http://hexo.zhuli.me/2012/05/04/add-custom-smilies-to-wordpress/</id>
    <published>2012-05-04T10:11:06.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>WordPress 自身自带了 22 个 表情图标。</p>
<p>如果你开启了“表情转换”功能的话， 就会将一些表情字符转换为相应的表情图片 比如 “：）” ，该功能开启方法如下：</p>
<p><em>注：[本文为了示例，将相应冒号专转换为中文冒号]</em></p>
<ol>
<li>前往站点后台</li>
<li>选择<em>设置 -&gt; 撰写</em></li>
<li>在<em>格式</em>区域，<strong>取消选择</strong>&quot;<em>转换如 :-)、:-P 等文字表情符号为图像</em>&quot; 的选项
然后今天，Zoe 说她想要新浪微博上一系列墩墩的表情（彼尔德），于是着手准备替换默认表情，然后就发现了很严重的问题，发现 WordPress 默认的表情库相当不理想，比如“开心”的表情，它有 “：smile：”， “：grin：”， “：lol：”，“：mrgreen：” ，再看围脖上的那套，哪来那么多开心的表情啊。另外， WordPress 还有诸如 “：arrow：” 这种。。。。。情何以堪。</li>
</ol>
<p>虽然表情数量刚好一样是 22 个，但是，如果只是简单的替换 WordPress 中相应的 “icon_*.gif” 的话，以前文章以及评论中写过的表情就乱套了，比如曾经你发了个微笑，现在的图片确实生气。。。。</p>
<p>能不能另外自定义这些表情符号以及他们对应的图片呢？显然是可以的，于是就产生了这篇文章。</p>
<p>原理，查看了 wp 官方的 <a href="http://codex.wordpress.org/Using_Smilies" title="Using Smilies">Codex - Using Smilies </a>，</p>
<blockquote>
<p>If you really must change the file names of the images, edit the file that refers to these images, &#39;<strong>vars.php&#39;</strong> (in WordPress 2.2, they&#39;re located in &#39;<strong>functions.php&#39;</strong>), situated in the <tt>/wp-includes/</tt> directory.
然后，就找到了那个文件，查找 “smilies”，就可以发现这个函数：</p>
</blockquote>
<pre><code><span class="xml">function smilies_init() {
    ......
}`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
好的，既然找到根源了，我们就可以动手了。

下面是修改方法：

</span><span class="comment"># 1. 搜集你需要的表情。</span><span class="xml">

将他们们命名，并想好他们的相应的表情符号（关键字）

比如： ：<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #</span><span class="number">993300</span><span class="xml">;"&gt;：bed 拍脸：<span class="tag">&lt;/<span class="title">span</span>&gt;</span> =》<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #</span><span class="number">339966</span><span class="xml">;"&gt; bed_pailian.gif<span class="tag">&lt;/<span class="title">span</span>&gt;</span>

我把他们都保存在了我的主题目录下的 _ images/smilies_ 文件夹下，这样，WP 升级后不会将其覆盖掉（还原掉，你不想的）

</span><span class="comment"># 2\. 改造主题的 function.php</span><span class="xml">

打开你的 _function.php _ 它一般位于：_$ 站点目录 /wp-content/themes/ 主题目录 / _ 下面，或者你也可以在 WP 后台 “Appearance” =》 “Editor” ，然后找到 _ function.php _。（注意：我建议不要直接在后台改造你的主题，因为如果出错，你的博客就下线了 :bed 蹬腿: ）

在空白位置，一般你可以选在该文件的最后面，另起一行，然后输入下面代码：
<span class="tag">&lt;<span class="title">pre</span>&gt;</span>`/**
 * Plugin Name: Add Custom Smilies
 * Plugin URI: http://zhuli.me/</span><span class="number">2012</span><span class="xml">/</span><span class="number">05</span><span class="xml">/</span><span class="number">04</span><span class="xml">/add-custom-smilies-to-wordpress.html
 * Description: Add More Smilies to your WP.
 * Version: </span><span class="number">0.0</span><span class="xml"></span><span class="number">.1</span><span class="xml">
 * Author: Leigh
 * Author URI: http://zhuli.me/
 */
function evolz_smilies_init() {
    global </span><span class="variable">$wpsmiliestrans</span><span class="xml">, </span><span class="variable">$wp_smiliessearch</span><span class="xml">, </span><span class="variable">$wp_smiliesreplace</span><span class="xml">;

    // don't bother setting up smilies if they are disabled
    if ( !get_option( 'use_smilies' ) )
        return;

    if ( !isset( </span><span class="variable">$wpsmiliestrans</span><span class="xml"> ) ) {
        </span><span class="variable">$wpsmiliestrans</span><span class="xml"> = array(
                ':bed 奔跑:' =&amp;gt; 'bed_benpao.gif',
                ':bed 蹬腿:' =&amp;gt; 'bed_dengtui.gif',
                ':bed 飞吻:' =&amp;gt; 'bed_feiwen.gif',
                ':bed 好饱:' =&amp;gt; 'bed_haobao.gif',
                ':bed 嘿哈:' =&amp;gt; 'bed_heiha.gif',
              ':bed 举哑铃:' =&amp;gt; 'bed_juyaling.gif',
              ':bed 啦啦啦:' =&amp;gt; 'bed_lalala.gif',
                ':bed 练腰:' =&amp;gt; 'bed_lianyao.gif',
                ':bed 凌乱:' =&amp;gt; 'bed_lingluan.gif',
                ':bed 拍脸:' =&amp;gt; 'bed_pailian.gif',
                ':bed 拍手:' =&amp;gt; 'bed_paishou.gif',
                  ':bed 跑:' =&amp;gt; 'bed_pao.gif',
                  ':bed 皮:' =&amp;gt; 'bed_pi.gif',
                ':bed 飘忽:' =&amp;gt; 'bed_piaohu.gif',
                ':bed 揉眼:' =&amp;gt; 'bed_rouyan.gif',
                ':bed 撒娇:' =&amp;gt; 'bed_sajiao.gif',
                ':bed 踏步:' =&amp;gt; 'bed_tabu.gif',
                ':bed 弹跳:' =&amp;gt; 'bed_tantiao.gif',
                  ':bed 跳:' =&amp;gt; 'bed_tiao.gif',
                   ':bed 兴奋:' =&amp;gt; 'bed_xingfen.gif',
            ':bed 仰卧起坐:' =&amp;gt; 'bed_yangwoqizuo.gif',
                ':bed 转圈:' =&amp;gt; 'bed_zhuanquan.gif',
                ':mrgreen:' =&amp;gt; 'icon_mrgreen.gif',
                ':neutral:' =&amp;gt; 'icon_neutral.gif',
                ':twisted:' =&amp;gt; 'icon_twisted.gif',
                  ':arrow:' =&amp;gt; 'icon_arrow.gif',
                  ':shock:' =&amp;gt; 'icon_eek.gif',
                  ':smile:' =&amp;gt; 'icon_smile.gif',
                    ':???:' =&amp;gt; 'icon_confused.gif',
                   ':cool:' =&amp;gt; 'icon_cool.gif',
                   ':evil:' =&amp;gt; 'icon_evil.gif',
                   ':grin:' =&amp;gt; 'icon_biggrin.gif',
                   ':idea:' =&amp;gt; 'icon_idea.gif',
                   ':oops:' =&amp;gt; 'icon_redface.gif',
                   ':razz:' =&amp;gt; 'icon_razz.gif',
                   ':roll:' =&amp;gt; 'icon_rolleyes.gif',
                   ':wink:' =&amp;gt; 'icon_wink.gif',
                    ':cry:' =&amp;gt; 'icon_cry.gif',
                    ':eek:' =&amp;gt; 'icon_surprised.gif',
                    ':lol:' =&amp;gt; 'icon_lol.gif',
                    ':mad:' =&amp;gt; 'icon_mad.gif',
                    ':sad:' =&amp;gt; 'icon_sad.gif',
                      '</span><span class="number">8</span><span class="xml">-)' =&amp;gt; 'icon_cool.gif',
                      '</span><span class="number">8</span><span class="xml">-O' =&amp;gt; 'icon_eek.gif',
                      ':-(' =&amp;gt; 'icon_sad.gif',
                      ':-)' =&amp;gt; 'icon_smile.gif',
                      ':-?' =&amp;gt; 'icon_confused.gif',
                      ':-D' =&amp;gt; 'icon_biggrin.gif',
                      ':-P' =&amp;gt; 'icon_razz.gif',
                      ':-o' =&amp;gt; 'icon_surprised.gif',
                      ':-x' =&amp;gt; 'icon_mad.gif',
                      ':-|' =&amp;gt; 'icon_neutral.gif',
                      ';-)' =&amp;gt; 'icon_wink.gif',
                       '</span><span class="number">8</span><span class="xml">)' =&amp;gt; 'icon_cool.gif',
                       '</span><span class="number">8</span><span class="xml">O' =&amp;gt; 'icon_eek.gif',
                       ':(' =&amp;gt; 'icon_sad.gif',
                       ':)' =&amp;gt; 'icon_smile.gif',
                       ':?' =&amp;gt; 'icon_confused.gif',
                       ':D' =&amp;gt; 'icon_biggrin.gif',
                       ':P' =&amp;gt; 'icon_razz.gif',
                       ':o' =&amp;gt; 'icon_surprised.gif',
                       ':x' =&amp;gt; 'icon_mad.gif',
                       ':|' =&amp;gt; 'icon_neutral.gif',
                       ';)' =&amp;gt; 'icon_wink.gif',
                      ':!:' =&amp;gt; 'icon_exclaim.gif',
                      ':?:' =&amp;gt; 'icon_question.gif',
        );
    }
    </span><span class="variable">$siteurl</span><span class="xml"> = get_option( 'siteurl' );
    foreach ( (array) </span><span class="variable">$wpsmiliestrans</span><span class="xml"> as </span><span class="variable">$smiley</span><span class="xml"> =&amp;gt; </span><span class="variable">$img</span><span class="xml"> ) {
    </span><span class="variable">$wp_smiliessearch</span><span class="xml">[] = '/(\s|^)' . preg_quote( </span><span class="variable">$smiley</span><span class="xml">, '/' ) . '(\s|$)/';
    </span><span class="variable">$smiley_masked</span><span class="xml"> = attribute_escape( trim( </span><span class="variable">$smiley</span><span class="xml"> ) );
    </span><span class="variable">$wp_smiliesreplace</span><span class="xml">[] = " &amp;lt;img src='</span><span class="variable">$siteurl</span><span class="xml">/wp-includes/images/smilies/</span><span class="variable">$img</span><span class="xml">' alt='</span><span class="variable">$smiley_masked</span><span class="xml">' class='wp-smiley' /&amp;gt; ";
    }
}

remove_action('init', 'smilies_init', </span><span class="number">5</span><span class="xml">);
add_action('init', 'evolz_smilies_init', </span><span class="number">5</span><span class="xml">);`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
我们可以看到上面代码最后的两条语句，倒数第二条移除了 WP 自带的 _smiles_init_ 函数，最后一条启用了我们自定义的  _ evolz_smilies_init  _ 函数。

这样，WP 在解析文章数据时候，便会便会在我们自定义的表情数组中查抄我们的表情了。

接下来，你要做的事情就是，定义你的表情列表，如上面代码中所示。
_ '：bed 奔跑：' =&amp;gt; 'bed_benpao.gif', _ 前面引号中的事表情符号（注意我这里为了演示用了中文冒号，你在定义的时候需要注意！），也就是你在写文章或评论时候输入的文字，后面引号中的就是相应的文件名了。

现在，我的表情和 新浪微博 的表情关键字是一样的了， 只是围脖用 [] 包含，而我用 :: 包含，这样做是因为，如上代码，我在自定义的表情后面仍然加上了 WP 默认的关键字和文件名列表，这样，你之前文章和评论中所引用的表情仍然可以保持不变，等于是在原来基础上多了一套表情了  :bed 啦啦啦:

</span><span class="comment"># 3. 将表情目录映射到我们自己的主题目录下的 _images/smilies_</span><span class="xml">

使用 我爱水煮鱼 的代码：
<span class="tag">&lt;<span class="title">pre</span>&gt;</span>`/**
 * Plugin Name: Custom Smilies Src
 * Plugin URI: http://fairyfish.net/m/custom_smilies_src/
 * Description: Custome Smiles Src
 * Version: </span><span class="number">0.1</span><span class="xml">
 * Author: Denis
 * Author URI: http://fairyfish.net/
 */
add_filter('smilies_src','custom_smilies_src',</span><span class="number">1</span><span class="xml">,</span><span class="number">10</span><span class="xml">);
function custom_smilies_src (</span><span class="variable">$img_src</span><span class="xml">, </span><span class="variable">$img</span><span class="xml">, </span><span class="variable">$siteurl</span><span class="xml">){
    return </span><span class="variable">$siteurl.</span><span class="xml">'/wp-content/themes/evolz/images/smilies/'.</span><span class="variable">$img</span><span class="xml">;
}</span>
</code></pre>
<p>这段代码的用途就是将 WP 的默认表情路径 <em>$siteurl/wp-includes/images/smilies/ </em> 映射到  $siteurl/wp-content/themes/ 你的主题目录 /images/smilies/</p>
<h1>4. Enjoy it.</h1>
<p>好的，没有第四步了，现在你可以在文章和评论中插入诸如  “ <em>：表情符号（关键字）：</em>” （不包括引号，另外再注：我是为了演示而使用了中文冒号）来使用这些表情啦 :bed 跳:</p>
<h1>5. 等等，还有一件事</h1>
<p>我们知道，WP 默认编辑器会莫名其妙删除一些空格，所以，如果是在 Visual 模式下写文章的的话，可能就会悲剧了，哎，这算个 bug 吧，改天看看能不能解决掉。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Codex/" term="Codex"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Wordpress Theme: Evo L.Z.]]></title>
    <link href="http://hexo.zhuli.me/2012/05/01/evo-leigh-zhu/"/>
    <id>http://hexo.zhuli.me/2012/05/01/evo-leigh-zhu/</id>
    <published>2012-05-01T12:31:18.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>主题永久了就会发现自己之前一个主题制作时候犯下的错误，另外官方的 Toolbox 也更新了，干脆重新做一个，也当练练手。</p>
<p>这个主题的目标是这样的（现在还在制作中，先换上来尝尝鲜。。。）</p>
<p>1.<del datetime="2012-05-03T06:53:17+00:00">流式布局</del>。 自适应布局（响应时布局 /<em>Responsive</em> Web Design）</p>
<p>2. 简单高效。</p>
<p>3. 贴代码方便（还在努力选择最佳方案中）</p>
<p>4. 好看</p>
<p>5. 好看</p>
<p>6. 还没想好</p>
<p>（留待更新。。。）</p>
<p>至于这个主题的名字，我想了又想，想了又想。得取一个看上去很好看的字符串啊。。。</p>
<p>最后取了这个 “Evo L.Z.”</p>
<p>意思是 Evolution Leigh Zhu ，就当是对下定决心舍去通信专业，投身于伟大的前端事业当中的一个纪念，另外，就当送给即将从学习生涯转向职业生涯的小礼物吧，哈哈哈！</p>
<p>当然这个主题依然会送给 Zoe ，那么在 Zoe 的博客上，他的意思，便成了，将这个正在升级中的我送给她咯～</p>
<p>其次呢，也当完成下每年一个主题的计划吧，哈哈哈 again ！</p>
<p>前端，必须给力！</p>
<p>人生，必须给力。</p>
<p>================</p>
<p>目前实现：</p>
<h2>Update@2012。05.05：</h2>
<ul>
<li>HTML5 语义化结构</li>
<li>CSS3 现代样式</li>
<li>自适应布局 （理论支持分辨 &gt;= 240px 的设备）</li>
<li>自定义菜单</li>
<li>集成彩色标签云</li>
<li>集成留言板（倒序排列）</li>
<li>集成分页导航</li>
<li>最新评论显示评论和头像</li>
<li>可自定义增加表情（已增加 新浪微博版彼尔德表情）</li>
<li>自定义表情路径（主题目录下）</li>
<li>评论框可插入表情</li>
<li>集成文章存档模板</li>
<li>文章页百度分享按钮
&nbsp;</li>
</ul>
]]></content>
    <category scheme="http://hexo.zhuli.me/tags/theme/" term="theme"/>
    <category scheme="http://hexo.zhuli.me/tags/wordpress/" term="wordpress"/>
    <category scheme="http://hexo.zhuli.me/categories/Blog-fix/" term="Blog-fix"/>
    <category scheme="http://hexo.zhuli.me/categories/Blog-fix/Codex/" term="Codex"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Chrome 扩展开发初涉]]></title>
    <link href="http://hexo.zhuli.me/2012/04/27/step-into-chrome-extension-develop/"/>
    <id>http://hexo.zhuli.me/2012/04/27/step-into-chrome-extension-develop/</id>
    <published>2012-04-27T02:01:02.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>翻阅 Google Reader 的时候，看到 <a href="http://uicss.cn/chrome-extensions/">霍凯这篇文章</a> ，又去看了<a href="http://code.google.com/chrome/extensions/getstarted.html">官方的文档</a>于是就发生了以下的事。
正如 霍凯 那篇文章中所说，开发一个 Chrome 扩展，首先，需要建立一个文件夹，新建一个 manifest.json 文件：</p>
<p><pre>{
 &quot;name&quot;: &quot;Tonton&#39;s Pet Snake！&quot;,
 &quot;version&quot;: &quot;0.1&quot;,
 &quot;description&quot;: &quot;Gready Snake like game&quot;,
 &quot;browser_action&quot;: {
 &quot;default_icon&quot;: &quot;icons/icon_19.png&quot;,
 &quot;default_popup&quot;: &quot;files/popup.html&quot;
 },
 &quot;icons&quot;: {
 &quot;16&quot;: &quot;icons/icon_16.png&quot;,
 &quot;19&quot;: &quot;icons/icon_19.png&quot;,
 &quot;32&quot;: &quot;icons/icon_32.png&quot;,
 &quot;48&quot;: &quot;icons/icon_48.png&quot;,
 &quot;128&quot;: &quot;icons/icon_128.png&quot;
 }
}</pre>
相信这些字段都不用解释了，故名则知意。
接下来就是准备好你的 icon ，当然你也可以不必放这么多大小的图标，如下所示去掉后面的 icons 完全不会有问题，只是某些情况下，你的应用程序图标会不太好看而已。</p>
<p>&nbsp;</p>
<p><pre>{
 &quot;name&quot;: &quot;Tonton&#39;s Pet Snake！&quot;,
 &quot;version&quot;: &quot;0.1&quot;,
 &quot;description&quot;: &quot;Gready Snake like game&quot;,
 &quot;browser_action&quot;: {
 &quot;default_icon&quot;: &quot;icons/icon.png&quot;,
 &quot;default_popup&quot;: &quot;files/popup.html&quot;
 }
}</pre>
然后就是前端最普通的工作了，编辑你的 popup.html ，添加各种事件，行为等等。
如果需要测试，打开 <a href="chrome://settings/extensions">chrome://settings/extensions</a>
勾选 “Develpoer mode” 然后点击 “Load unpacked extension...” 选择你之前新建的扩展文件夹即可。
如果开发完成，那就点击 “Pack extension” 将你的扩展打包。打包的时候，会让你选择扩展目录和密钥文件，扩展目录即你之前 Load 的那个，密钥文件（xxx.pem）的话是用于之后更新扩展所用，第一次打包时不用选择，第一次打包完成后，请将这个文件保存好，下次更新时需要用到。
如此便完成了简单的扩展的开发。
另外，360 浏览器团队也翻译了 Google 的官方开发文档，需要的朋友可以前去查看：<a href="http://open.chrome.360.cn/html/dev_doc.html">360 翻译的开发文档</a>
附上我的第一个 Chrome 扩展，也是我的第一个 js 游戏作品：
<strong>墩墩的宠物蛇（贪吃蛇类游戏）<a href="http://zhuli.me/wp-content/uploads/2012/04/tontonsnake.crx">Tonton&#39;s snake</a></strong></p>
]]></content>
    <category scheme="http://hexo.zhuli.me/tags/chrome/" term="chrome"/>
    <category scheme="http://hexo.zhuli.me/tags/chrome-extension/" term="chrome extension"/>
    <category scheme="http://hexo.zhuli.me/categories/Codex/" term="Codex"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[信息工程院网的工作所犯问题总结]]></title>
    <link href="http://hexo.zhuli.me/2012/04/20/summary-for-hziee-edu-cn-working/"/>
    <id>http://hexo.zhuli.me/2012/04/20/summary-for-hziee-edu-cn-working/</id>
    <published>2012-04-20T08:14:20.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>今年 2 月、3 月，有幸成为信息工程学院院网<a href="http://www.hziee.edu.cn"> [<a href="http://www.hziee.edu.cn">http://www.hziee.edu.cn</a></a> ] 制作人，承担了前端页面方面的工作。</p>
<p>现在院网基本进入正常运行。总结一些另自己后悔的问题。</p>
<p>1. 起初未和后端的同学，pjsky 协调好字符编码。
由于我本人长期工作在 UTF-8 编码环境下，自然而然选择了 UTF-8 作为前端实现的编码方案，知道后来整合测试才知道，后端同学用了 GBK ，于是我被迫转码了，导致了我这边 GBK 支持的编辑器不太适应，调试修改变得很头疼。</p>
<p>2. 对于 HTML 文稿实现时，没有形成成熟的 id 与 class 命名方案。
这是因为自己的经验还是不够多，没有积累下一整套的自己的方案，而正是开工后，也一直没有时间去看一些成熟的框架，学习他们的命名方案。</p>
<p>3. 院网工作开始时，没有部署一些版本控制方案。
这直接导致了修改方案时，不能代码回档！！！！  T T   不过，以现在的硬件资源情况，也没有一种好的方式。。。</p>
<p>这几个对于我来说，是相当苦恼的问题，好在基本是解决了，接下去的任务就是要思考怎么把这一堆代码留给下一届的继承人了。</p>
<p>好吧。。继续努力吧。</p>
]]></content>
    <category scheme="http://hexo.zhuli.me/categories/Life/" term="Life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Kindle Touch 字体无痛修改]]></title>
    <link href="http://hexo.zhuli.me/2012/03/14/kindle-touch-fonts-hack/"/>
    <id>http://hexo.zhuli.me/2012/03/14/kindle-touch-fonts-hack/</id>
    <published>2012-03-14T02:20:13.000Z</published>
    <updated>2013-04-20T04:38:15.000Z</updated>
    <content type="html"><![CDATA[<p>Kindle Touch 是原生支持中文的，所以直接显示中文，没有多大问题，但是仔细看的话，会发现，其显示中文的字体是无衬线的，啥叫无衬线呢，微软雅黑和黑体就是无衬线的，学过前端或者印刷或者平面等的同学都会知道，吴衬线字体，其实不适合作为正文的字体的，因为长时间看无衬线字体，会很疲劳，因此。另一个问题就是，有些字体，大小不一，颜色深浅不一，看着不是很舒服，于是，既然越狱了，就干脆改了字体。</p>
<p>注意，一下步骤，需要<strong><span style="color: #ff0000;">先将系统越狱，以及安装 usbnetwork，并可以用 ssh 链接到 kindle</span></strong>，具体方法可见我 之前的一片文章《<a href="../2012/02/29/jailbreak-and-backup-kindle-touch.html" title="Permalink to Kindle 折腾起步，越狱及备份">Kindle 折腾起步，越狱及备份》 。 </a></p>
<p>本文方法参考了以下几位前辈的文章：<a href="http://www.idndx.com/posts/knowing-kindle-touch-font-mechanism-and-get-the-best-way-to-replace-chinese-fonts.html">Dnxn</a> ，<a href="http://bbs.duokan.com/forum/thread-56918-1-2.html">windirt</a>， <a href="http://www.mobileread.com/forums/showthread.php?t=168765">ixtab</a> 。</p>
<p>因为 Kindle Touch 实际上是基于 Linux ，加上 Java 虚拟机，以及一些框架构成的，所以，其字体配置其实就是 Linux 系统下的 Fontconfig 文件，也就是位于 /etc/fonts/ 下的 local.conf 配置文件。</p>
<p>如果您对 Linux 不熟悉的话，可以看下这个文档 “<a href="http://www.360doc.com/content/05/0907/14/256_10866.shtml">Fontconfig 配置详解</a>” ，当然，如果您不愿意去费这力气，继续往下按照我的步骤就是。</p>
<p>这是 local.conf 中关于字体的一段</p>
<pre><code><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;alias&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>serif<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;/family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;prefer&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>Caecilia Regular<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;/family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span> # 英文字体
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>Kindle Symbol<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;/family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span> #KT 中用到的小图标字体
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>HeiseiMaruGoth_JIS0213_E<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;/family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span> # 日文字体
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>HangulGothicMTC-Medium_E<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;/family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span> # 韩文字体
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>MHeiGB18030C-Medium_E<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;/family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span> # 简体中文字体
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>MHeiC-Medium-Big5HKSCS_E<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;/family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span> # 正体中文字体
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>Code2000<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;/family&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span> # 同样是英文字体，备用
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>    &amp;lt;/prefer&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #000080; font-weight: bold;"</span>&gt;</span>&amp;lt;/alias&amp;gt;<span class="tag">&lt;/<span class="title">span</span>&gt;</span>`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>
这是 serif 也就是衬线字体的配置部分，纵观整个 local.conf ，其实 serif ，sans-serif 的差别只有英文字体部分，而中文字体，只有一个 “MHeiGB18030C-Medium_E” ，而大家知道，日文中，也会有汉语字符，那些个深浅不一的字，就是先从“HeiseiMaruGoth_JIS0213_E”这个日文字体中找到了那个字，所以产生了这种情况，我们要做的，就是在这个字体之前，插入我们自定义的字体。
方法大致如下：

<span class="tag">&lt;<span class="title">pre</span>&gt;</span>`
mntroot rw
ln -s /mnt/us/fonts/99-leigh.conf /etc/fonts/conf.d/
cd /usr/share/fonts
mkdir leigh
cd leigh
ln -s /mnt/us/fonts/*.ttf .
mkfontscale
mkfontdir
fc-cache -v -f
mntroot ro
killall cvm
exit
`<span class="tag">&lt;/<span class="title">pre</span>&gt;</span>

你可以下载我的字体配置文件：[下载地址](http://dl.dbank.com/c0jfcij0ky) <span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #ff0000;"</span>&gt;</span>Update: 根据大家反馈，网盘换至华为网盘。@2012.08.07<span class="tag">&lt;/<span class="title">span</span>&gt;</span>

下面是回复默认的方法，同样需要 ssh 登录～
<span class="tag">&lt;<span class="title">pre</span>&gt;</span>`
mntroot rw
rm -f /etc/fonts/conf.d/99-leigh.conf
cd /usr/share/fonts
rm -rf leigh
fc-cache -v -f
mntroot ro
killall cvm
exit
</code></pre>
<p>我的配置大致如下:
定义 serif ：字体为 方正雅宋 ;
定义 sans-serif ：字体为 华文细黑（常态），微软雅黑（粗体）// 原以为华文细黑是 sans-serif，结果貌似在 kindle 上看起来是 serif ，不管了，反正耶不用 sans-serif 看书，实在有需要或者有完美主义的朋友可以自己改成雅黑之类的
condensed 则使用了微软正黑，如果繁体字的书，可以用这个字体看，也许效果会好一点。
monospace 则是用了 ixtab 包里的 Bitstream Vera Sans Mono 字体，效果还不错。</p>
<p>截图如下：
目录页，因为有定义粗体字，所以不会出现 dnxn 的现象</p>
<p><img src="http://pic.yupoo.com/lisposter/BPhGkNjn/Wr31r.gif" alt="">
<img src="http://pic.yupoo.com/lisposter/BOw3e4Zc/hk4uE.gif" alt=""></p>
<p>下面是中文效果，这个字体因该是 雅宋 字体。
<img src="http://pic.yupoo.com/lisposter/BOw3elzw/YZhS.gif" alt="">
下面是英文显示，因该是和原生没有区别的，因为我们是在日文字体之前插入我们的自定义字体，而没有覆盖掉英文的字体设置。
<img src="http://pic.yupoo.com/lisposter/BOw3edLm/LtP5Y.gif" alt="">
下面是新闻页的展示：
<img src="http://pic.yupoo.com/lisposter/BOw3ejaQ/gNbOx.gif" alt=""></p>
]]></content>
    <category scheme="http://hexo.zhuli.me/tags/font/" term="font"/>
    <category scheme="http://hexo.zhuli.me/tags/kindle/" term="kindle"/>
    <category scheme="http://hexo.zhuli.me/categories/Tutor/" term="Tutor"/>
  </entry>
</feed>
